=begin
#ChronoSheets API

#<div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'spec_helper'
require 'json'

# Unit tests for ChronoSheetsAPI::GeoFencingApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GeoFencingApi' do
  before do
    # run before each test
    @instance = ChronoSheetsAPI::GeoFencingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GeoFencingApi' do
    it 'should create an instance of GeoFencingApi' do
      expect(@instance).to be_instance_of(ChronoSheetsAPI::GeoFencingApi)
    end
  end

  # unit tests for geo_fencing_create_geofence
  # Create a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
  # @param request 
  # @param x_chronosheets_auth The ChronoSheets Auth Token
  # @param [Hash] opts the optional parameters
  # @return [CSApiResponseInt32]
  describe 'geo_fencing_create_geofence test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for geo_fencing_delete_geofence
  # Deletes a geofence.  Requires the &#39;ManageGeofencing&#39; permission.
  # @param geofence_id Specify the geofence you want to delete with the geofence ID.
  # @param x_chronosheets_auth The ChronoSheets Auth Token
  # @param [Hash] opts the optional parameters
  # @return [CSApiResponseGeofence]
  describe 'geo_fencing_delete_geofence test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for geo_fencing_get_geofence_by_id
  # Get a geofence by ID  Requires the &#39;SubmitTimesheets&#39; permission.
  # @param geofence_id The ID of the geofence you want to obtain
  # @param x_chronosheets_auth The ChronoSheets Auth Token
  # @param [Hash] opts the optional parameters
  # @return [CSApiResponseGeofence]
  describe 'geo_fencing_get_geofence_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for geo_fencing_get_geofences
  # Get geofences belonging to your organisation  Requires the &#39;SubmitTimesheets&#39; permission.
  # @param x_chronosheets_auth The ChronoSheets Auth Token
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :skip Number of records to skip
  # @option opts [Integer] :take Number of records to take
  # @return [CSApiResponseForPaginatedListExtendedGeofence]
  describe 'geo_fencing_get_geofences test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for geo_fencing_update_geofence
  # Updates a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
  # @param request 
  # @param x_chronosheets_auth The ChronoSheets Auth Token
  # @param [Hash] opts the optional parameters
  # @return [CSApiResponseInt32]
  describe 'geo_fencing_update_geofence test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
