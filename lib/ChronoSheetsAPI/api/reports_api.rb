=begin
#ChronoSheets API

#<div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module ChronoSheetsAPI
  class ReportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @option opts [String] :force_only_this_chart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option.
    # @return [ApiResponseCombinedReportsData]
    def reports_get_all_charts_data_admin(start_date, end_date, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = reports_get_all_charts_data_admin_with_http_info(start_date, end_date, x_chronosheets_auth, opts)
      data
    end

    # Get Consolidated Admin Reports Data (Jobs, Tasks, Clients and Projects).  These are the organisation wide reports, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @option opts [String] :force_only_this_chart A flag to indicate which report data you require.  Choose a particular set of data, or if you want all data use the &#39;NotForced&#39; option.
    # @return [Array<(ApiResponseCombinedReportsData, Integer, Hash)>] ApiResponseCombinedReportsData data, response status code and response headers
    def reports_get_all_charts_data_admin_with_http_info(start_date, end_date, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_get_all_charts_data_admin ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ReportsApi.reports_get_all_charts_data_admin"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling ReportsApi.reports_get_all_charts_data_admin"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling ReportsApi.reports_get_all_charts_data_admin"
      end
      allowable_values = ["NotForced", "SeriesJobCodes", "SeriesClients", "SeriesProjects", "SeriesTasks", "TotalsClients", "TotalsJobCodes", "TotalsProjects", "TotalsTasks"]
      if @api_client.config.client_side_validation && opts[:'force_only_this_chart'] && !allowable_values.include?(opts[:'force_only_this_chart'])
        fail ArgumentError, "invalid value for \"force_only_this_chart\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/Reports/GetAllChartsDataAdmin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'StartDate'] = start_date
      query_params[:'EndDate'] = end_date
      query_params[:'UserIds'] = opts[:'user_ids'] if !opts[:'user_ids'].nil?
      query_params[:'ForceOnlyThisChart'] = opts[:'force_only_this_chart'] if !opts[:'force_only_this_chart'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseCombinedReportsData' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_get_all_charts_data_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user's own reports.    Requires the 'ViewOwnReports' permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseCombinedReportsData]
    def reports_get_all_charts_data_user(start_date, end_date, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = reports_get_all_charts_data_user_with_http_info(start_date, end_date, x_chronosheets_auth, opts)
      data
    end

    # Get Consolidated User Reports Data (Jobs, Tasks, Clients and Projects).  These are the user&#39;s own reports.    Requires the &#39;ViewOwnReports&#39; permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseCombinedReportsData, Integer, Hash)>] ApiResponseCombinedReportsData data, response status code and response headers
    def reports_get_all_charts_data_user_with_http_info(start_date, end_date, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_get_all_charts_data_user ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ReportsApi.reports_get_all_charts_data_user"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling ReportsApi.reports_get_all_charts_data_user"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling ReportsApi.reports_get_all_charts_data_user"
      end
      # resource path
      local_var_path = '/Reports/GetAllChartsDataUser'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'StartDate'] = start_date
      query_params[:'EndDate'] = end_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseCombinedReportsData' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_get_all_charts_data_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the 'ReportAdmin' permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @return [ApiResponseListFleetSummaryReportItem]
    def reports_get_fleet_summary_admin(start_date, end_date, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = reports_get_fleet_summary_admin_with_http_info(start_date, end_date, x_chronosheets_auth, opts)
      data
    end

    # Gets a summary report, which includes total distance travelled and total running costs, for vehicles within your organisation  Requires the &#39;ReportAdmin&#39; permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @return [Array<(ApiResponseListFleetSummaryReportItem, Integer, Hash)>] ApiResponseListFleetSummaryReportItem data, response status code and response headers
    def reports_get_fleet_summary_admin_with_http_info(start_date, end_date, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_get_fleet_summary_admin ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ReportsApi.reports_get_fleet_summary_admin"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling ReportsApi.reports_get_fleet_summary_admin"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling ReportsApi.reports_get_fleet_summary_admin"
      end
      # resource path
      local_var_path = '/Reports/GetFleetSummaryAdmin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'StartDate'] = start_date
      query_params[:'EndDate'] = end_date
      query_params[:'UserIds'] = opts[:'user_ids'] if !opts[:'user_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseListFleetSummaryReportItem' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_get_fleet_summary_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get trip by Id, for reporting purposes.    Requires the 'ReportAdmin' permission.
    # @param trip_id [Integer] The ID of the Trip you want to get
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseTrip]
    def reports_get_org_trip_by_id(trip_id, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = reports_get_org_trip_by_id_with_http_info(trip_id, x_chronosheets_auth, opts)
      data
    end

    # Get trip by Id, for reporting purposes.    Requires the &#39;ReportAdmin&#39; permission.
    # @param trip_id [Integer] The ID of the Trip you want to get
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseTrip, Integer, Hash)>] ApiResponseTrip data, response status code and response headers
    def reports_get_org_trip_by_id_with_http_info(trip_id, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_get_org_trip_by_id ...'
      end
      # verify the required parameter 'trip_id' is set
      if @api_client.config.client_side_validation && trip_id.nil?
        fail ArgumentError, "Missing the required parameter 'trip_id' when calling ReportsApi.reports_get_org_trip_by_id"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling ReportsApi.reports_get_org_trip_by_id"
      end
      # resource path
      local_var_path = '/Reports/GetOrgTripById'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'TripId'] = trip_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseTrip' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_get_org_trip_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the 'ReportAdmin' permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip this many items
    # @option opts [Integer] :take Take this many items
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @return [ApiResponseForPaginatedListOrgReportTimesheetFileAttachment]
    def reports_get_organisation_timesheet_file_attachments(start_date, end_date, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = reports_get_organisation_timesheet_file_attachments_with_http_info(start_date, end_date, x_chronosheets_auth, opts)
      data
    end

    # Reports on Organisation timesheet file attachments (files uploaded and attached to timesheet records)  Requires the &#39;ReportAdmin&#39; permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip this many items
    # @option opts [Integer] :take Take this many items
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @return [Array<(ApiResponseForPaginatedListOrgReportTimesheetFileAttachment, Integer, Hash)>] ApiResponseForPaginatedListOrgReportTimesheetFileAttachment data, response status code and response headers
    def reports_get_organisation_timesheet_file_attachments_with_http_info(start_date, end_date, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_get_organisation_timesheet_file_attachments ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ReportsApi.reports_get_organisation_timesheet_file_attachments"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling ReportsApi.reports_get_organisation_timesheet_file_attachments"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling ReportsApi.reports_get_organisation_timesheet_file_attachments"
      end
      # resource path
      local_var_path = '/Reports/GetOrganisationTimesheetFileAttachments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'StartDate'] = start_date
      query_params[:'EndDate'] = end_date
      query_params[:'Skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'Take'] = opts[:'take'] if !opts[:'take'].nil?
      query_params[:'UserIds'] = opts[:'user_ids'] if !opts[:'user_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseForPaginatedListOrgReportTimesheetFileAttachment' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_get_organisation_timesheet_file_attachments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the 'ReportAdmin' permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip this many items
    # @option opts [Integer] :take Take this many items
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @option opts [String] :keywords Search the transcripts by keyword(s)
    # @return [ApiResponseForPaginatedListOrgReportTranscript]
    def reports_get_organisation_transcripts(start_date, end_date, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = reports_get_organisation_transcripts_with_http_info(start_date, end_date, x_chronosheets_auth, opts)
      data
    end

    # Reports on Organisation transcripts (When an audio file is attached, it will be automatically transcribed, these are the transcriptions)    Requires the &#39;ReportAdmin&#39; permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip this many items
    # @option opts [Integer] :take Take this many items
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @option opts [String] :keywords Search the transcripts by keyword(s)
    # @return [Array<(ApiResponseForPaginatedListOrgReportTranscript, Integer, Hash)>] ApiResponseForPaginatedListOrgReportTranscript data, response status code and response headers
    def reports_get_organisation_transcripts_with_http_info(start_date, end_date, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_get_organisation_transcripts ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ReportsApi.reports_get_organisation_transcripts"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling ReportsApi.reports_get_organisation_transcripts"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling ReportsApi.reports_get_organisation_transcripts"
      end
      # resource path
      local_var_path = '/Reports/GetOrganisationTranscripts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'StartDate'] = start_date
      query_params[:'EndDate'] = end_date
      query_params[:'Skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'Take'] = opts[:'take'] if !opts[:'take'].nil?
      query_params[:'UserIds'] = opts[:'user_ids'] if !opts[:'user_ids'].nil?
      query_params[:'Keywords'] = opts[:'keywords'] if !opts[:'keywords'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseForPaginatedListOrgReportTranscript' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_get_organisation_transcripts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reports on Organisation trips (GPS tracking from whole organisation).    Requires the 'ReportAdmin' permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip this many items
    # @option opts [Integer] :take Take this many items
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @return [ApiResponseForPaginatedListOrgReportTrip]
    def reports_get_organisation_trips(start_date, end_date, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = reports_get_organisation_trips_with_http_info(start_date, end_date, x_chronosheets_auth, opts)
      data
    end

    # Reports on Organisation trips (GPS tracking from whole organisation).    Requires the &#39;ReportAdmin&#39; permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Skip this many items
    # @option opts [Integer] :take Take this many items
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @return [Array<(ApiResponseForPaginatedListOrgReportTrip, Integer, Hash)>] ApiResponseForPaginatedListOrgReportTrip data, response status code and response headers
    def reports_get_organisation_trips_with_http_info(start_date, end_date, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_get_organisation_trips ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ReportsApi.reports_get_organisation_trips"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling ReportsApi.reports_get_organisation_trips"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling ReportsApi.reports_get_organisation_trips"
      end
      # resource path
      local_var_path = '/Reports/GetOrganisationTrips'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'StartDate'] = start_date
      query_params[:'EndDate'] = end_date
      query_params[:'Skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'Take'] = opts[:'take'] if !opts[:'take'].nil?
      query_params[:'UserIds'] = opts[:'user_ids'] if !opts[:'user_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseForPaginatedListOrgReportTrip' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_get_organisation_trips\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the 'ReportAdmin' permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @option opts [String] :sort Decide which column to sort on
    # @option opts [String] :order Decide which direction to sort the column
    # @option opts [Integer] :skip Skip this many rows
    # @option opts [Integer] :take Take this many rows
    # @return [ApiResponseForPaginatedListRawReportItem]
    def reports_get_raw_data_admin(start_date, end_date, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = reports_get_raw_data_admin_with_http_info(start_date, end_date, x_chronosheets_auth, opts)
      data
    end

    # Get Timesheets Raw Data.  This data details each timesheet record.  These are the organisation wide timesheet records, with data from potentially all employees.    Requires the &#39;ReportAdmin&#39; permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @option opts [String] :sort Decide which column to sort on
    # @option opts [String] :order Decide which direction to sort the column
    # @option opts [Integer] :skip Skip this many rows
    # @option opts [Integer] :take Take this many rows
    # @return [Array<(ApiResponseForPaginatedListRawReportItem, Integer, Hash)>] ApiResponseForPaginatedListRawReportItem data, response status code and response headers
    def reports_get_raw_data_admin_with_http_info(start_date, end_date, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_get_raw_data_admin ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ReportsApi.reports_get_raw_data_admin"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling ReportsApi.reports_get_raw_data_admin"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling ReportsApi.reports_get_raw_data_admin"
      end
      allowable_values = ["EmailAddress", "JobCode", "TaskName", "ClientName", "ProjectName", "StartDate", "EndDate", "SpanSeconds", "Description", "PayAmount", "PayOvertimeAmount", "TripCost", "TripDistanceMeters", "Username"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["Ascending", "Descending"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/Reports/GetRawDataAdmin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'StartDate'] = start_date
      query_params[:'EndDate'] = end_date
      query_params[:'UserIds'] = opts[:'user_ids'] if !opts[:'user_ids'].nil?
      query_params[:'Sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'Order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'Skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'Take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseForPaginatedListRawReportItem' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_get_raw_data_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets project cost estimations VS actual cost for date range and users.    Requires the 'ReportAdmin' permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @return [ApiResponseListProjectCostingReportItem]
    def reports_project_costings_admin(start_date, end_date, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = reports_project_costings_admin_with_http_info(start_date, end_date, x_chronosheets_auth, opts)
      data
    end

    # Gets project cost estimations VS actual cost for date range and users.    Requires the &#39;ReportAdmin&#39; permission.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_ids A comma-separated list of user Ids, if you want to filter the report data to particular users.  If you want all, send a blank string.
    # @return [Array<(ApiResponseListProjectCostingReportItem, Integer, Hash)>] ApiResponseListProjectCostingReportItem data, response status code and response headers
    def reports_project_costings_admin_with_http_info(start_date, end_date, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_project_costings_admin ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ReportsApi.reports_project_costings_admin"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling ReportsApi.reports_project_costings_admin"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling ReportsApi.reports_project_costings_admin"
      end
      # resource path
      local_var_path = '/Reports/ProjectCostingsAdmin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'StartDate'] = start_date
      query_params[:'EndDate'] = end_date
      query_params[:'UserIds'] = opts[:'user_ids'] if !opts[:'user_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseListProjectCostingReportItem' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_project_costings_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Timeseries jobs data for the logged in user.    Requires the 'ViewOwnReports' or 'SubmitTimesheets'.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseListJobSeriesReportItem]
    def reports_user_jobs_over_time(start_date, end_date, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = reports_user_jobs_over_time_with_http_info(start_date, end_date, x_chronosheets_auth, opts)
      data
    end

    # Timeseries jobs data for the logged in user.    Requires the &#39;ViewOwnReports&#39; or &#39;SubmitTimesheets&#39;.
    # @param start_date [DateTime] The start date for the date range.  Report data in the response is after this date
    # @param end_date [DateTime] The end date for the date range.  Report data in the response is before this date
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseListJobSeriesReportItem, Integer, Hash)>] ApiResponseListJobSeriesReportItem data, response status code and response headers
    def reports_user_jobs_over_time_with_http_info(start_date, end_date, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.reports_user_jobs_over_time ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling ReportsApi.reports_user_jobs_over_time"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling ReportsApi.reports_user_jobs_over_time"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling ReportsApi.reports_user_jobs_over_time"
      end
      # resource path
      local_var_path = '/Reports/UserJobsOverTime'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'StartDate'] = start_date
      query_params[:'EndDate'] = end_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseListJobSeriesReportItem' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#reports_user_jobs_over_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
