=begin
#ChronoSheets API

#<div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module ChronoSheetsAPI
  class GeoFencingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a geofencing with rules to be used for clock on/off automation.  Requires the 'ManageGeofencing' permission.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param request [CreateGeoFenceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseInt32]
    def geo_fencing_create_geofence(x_chronosheets_auth, request, opts = {})
      data, _status_code, _headers = geo_fencing_create_geofence_with_http_info(x_chronosheets_auth, request, opts)
      data
    end

    # Create a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param request [CreateGeoFenceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseInt32, Integer, Hash)>] ApiResponseInt32 data, response status code and response headers
    def geo_fencing_create_geofence_with_http_info(x_chronosheets_auth, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoFencingApi.geo_fencing_create_geofence ...'
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling GeoFencingApi.geo_fencing_create_geofence"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling GeoFencingApi.geo_fencing_create_geofence"
      end
      # resource path
      local_var_path = '/GeoFencing/CreateGeofence'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResponseInt32'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GeoFencingApi.geo_fencing_create_geofence",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoFencingApi#geo_fencing_create_geofence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a geofence.  Requires the 'ManageGeofencing' permission.
    # @param geofence_id [Integer] Specify the geofence you want to delete with the geofence ID.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseGeofence]
    def geo_fencing_delete_geofence(geofence_id, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = geo_fencing_delete_geofence_with_http_info(geofence_id, x_chronosheets_auth, opts)
      data
    end

    # Deletes a geofence.  Requires the &#39;ManageGeofencing&#39; permission.
    # @param geofence_id [Integer] Specify the geofence you want to delete with the geofence ID.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseGeofence, Integer, Hash)>] ApiResponseGeofence data, response status code and response headers
    def geo_fencing_delete_geofence_with_http_info(geofence_id, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoFencingApi.geo_fencing_delete_geofence ...'
      end
      # verify the required parameter 'geofence_id' is set
      if @api_client.config.client_side_validation && geofence_id.nil?
        fail ArgumentError, "Missing the required parameter 'geofence_id' when calling GeoFencingApi.geo_fencing_delete_geofence"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling GeoFencingApi.geo_fencing_delete_geofence"
      end
      # resource path
      local_var_path = '/GeoFencing/DeleteGeofence'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'GeofenceId'] = geofence_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResponseGeofence'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GeoFencingApi.geo_fencing_delete_geofence",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoFencingApi#geo_fencing_delete_geofence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a geofence by ID  Requires the 'SubmitTimesheets' permission.
    # @param geofence_id [Integer] The ID of the geofence you want to obtain
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseGeofence]
    def geo_fencing_get_geofence_by_id(geofence_id, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = geo_fencing_get_geofence_by_id_with_http_info(geofence_id, x_chronosheets_auth, opts)
      data
    end

    # Get a geofence by ID  Requires the &#39;SubmitTimesheets&#39; permission.
    # @param geofence_id [Integer] The ID of the geofence you want to obtain
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseGeofence, Integer, Hash)>] ApiResponseGeofence data, response status code and response headers
    def geo_fencing_get_geofence_by_id_with_http_info(geofence_id, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoFencingApi.geo_fencing_get_geofence_by_id ...'
      end
      # verify the required parameter 'geofence_id' is set
      if @api_client.config.client_side_validation && geofence_id.nil?
        fail ArgumentError, "Missing the required parameter 'geofence_id' when calling GeoFencingApi.geo_fencing_get_geofence_by_id"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling GeoFencingApi.geo_fencing_get_geofence_by_id"
      end
      # resource path
      local_var_path = '/GeoFencing/GetGeofenceById'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'GeofenceId'] = geofence_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResponseGeofence'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GeoFencingApi.geo_fencing_get_geofence_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoFencingApi#geo_fencing_get_geofence_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get geofences belonging to your organisation  Requires the 'SubmitTimesheets' permission.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Number of records to skip
    # @option opts [Integer] :take Number of records to take
    # @return [ApiResponseForPaginatedListExtendedGeofence]
    def geo_fencing_get_geofences(x_chronosheets_auth, opts = {})
      data, _status_code, _headers = geo_fencing_get_geofences_with_http_info(x_chronosheets_auth, opts)
      data
    end

    # Get geofences belonging to your organisation  Requires the &#39;SubmitTimesheets&#39; permission.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip Number of records to skip
    # @option opts [Integer] :take Number of records to take
    # @return [Array<(ApiResponseForPaginatedListExtendedGeofence, Integer, Hash)>] ApiResponseForPaginatedListExtendedGeofence data, response status code and response headers
    def geo_fencing_get_geofences_with_http_info(x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoFencingApi.geo_fencing_get_geofences ...'
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling GeoFencingApi.geo_fencing_get_geofences"
      end
      # resource path
      local_var_path = '/GeoFencing/GetGeofences'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'Skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'Take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResponseForPaginatedListExtendedGeofence'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GeoFencingApi.geo_fencing_get_geofences",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoFencingApi#geo_fencing_get_geofences\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of all geofences in your organisation, including just the name and ID.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseForPaginatedListBasicGeofence]
    def geo_fencing_get_geofences_basic_info(x_chronosheets_auth, opts = {})
      data, _status_code, _headers = geo_fencing_get_geofences_basic_info_with_http_info(x_chronosheets_auth, opts)
      data
    end

    # Gets a list of all geofences in your organisation, including just the name and ID.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseForPaginatedListBasicGeofence, Integer, Hash)>] ApiResponseForPaginatedListBasicGeofence data, response status code and response headers
    def geo_fencing_get_geofences_basic_info_with_http_info(x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoFencingApi.geo_fencing_get_geofences_basic_info ...'
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling GeoFencingApi.geo_fencing_get_geofences_basic_info"
      end
      # resource path
      local_var_path = '/GeoFencing/GetGeofencesBasicInfo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResponseForPaginatedListBasicGeofence'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GeoFencingApi.geo_fencing_get_geofences_basic_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoFencingApi#geo_fencing_get_geofences_basic_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a geofencing with rules to be used for clock on/off automation.  Requires the 'ManageGeofencing' permission.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param request [UpdateGeoFenceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseInt32]
    def geo_fencing_update_geofence(x_chronosheets_auth, request, opts = {})
      data, _status_code, _headers = geo_fencing_update_geofence_with_http_info(x_chronosheets_auth, request, opts)
      data
    end

    # Updates a geofencing with rules to be used for clock on/off automation.  Requires the &#39;ManageGeofencing&#39; permission.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param request [UpdateGeoFenceRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseInt32, Integer, Hash)>] ApiResponseInt32 data, response status code and response headers
    def geo_fencing_update_geofence_with_http_info(x_chronosheets_auth, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GeoFencingApi.geo_fencing_update_geofence ...'
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling GeoFencingApi.geo_fencing_update_geofence"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling GeoFencingApi.geo_fencing_update_geofence"
      end
      # resource path
      local_var_path = '/GeoFencing/UpdateGeofence'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request)

      # return_type
      return_type = opts[:debug_return_type] || 'ApiResponseInt32'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"GeoFencingApi.geo_fencing_update_geofence",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GeoFencingApi#geo_fencing_update_geofence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
