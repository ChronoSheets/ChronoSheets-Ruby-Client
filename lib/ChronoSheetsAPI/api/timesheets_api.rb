=begin
#ChronoSheets API

#<div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module ChronoSheetsAPI
  class TimesheetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Inserts a single timesheet record.    Requires the 'SubmitTimesheets' permission.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param request [Timesheet] A Timesheet Request object containing values for the new Timesheet to create
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseInt32]
    def timesheets_create_single_timesheet(x_chronosheets_auth, request, opts = {})
      data, _status_code, _headers = timesheets_create_single_timesheet_with_http_info(x_chronosheets_auth, request, opts)
      data
    end

    # Inserts a single timesheet record.    Requires the &#39;SubmitTimesheets&#39; permission.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param request [Timesheet] A Timesheet Request object containing values for the new Timesheet to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseInt32, Integer, Hash)>] ApiResponseInt32 data, response status code and response headers
    def timesheets_create_single_timesheet_with_http_info(x_chronosheets_auth, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimesheetsApi.timesheets_create_single_timesheet ...'
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling TimesheetsApi.timesheets_create_single_timesheet"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling TimesheetsApi.timesheets_create_single_timesheet"
      end
      # resource path
      local_var_path = '/Timesheets/CreateSingleTimesheet'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request) 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseInt32' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimesheetsApi#timesheets_create_single_timesheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a timesheet.    Requires the 'SubmitTimesheets' permission.
    # @param timesheet_id [Integer] The ID of the Timesheet you want to delete
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseBoolean]
    def timesheets_delete_timesheet(timesheet_id, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = timesheets_delete_timesheet_with_http_info(timesheet_id, x_chronosheets_auth, opts)
      data
    end

    # Delete a timesheet.    Requires the &#39;SubmitTimesheets&#39; permission.
    # @param timesheet_id [Integer] The ID of the Timesheet you want to delete
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseBoolean, Integer, Hash)>] ApiResponseBoolean data, response status code and response headers
    def timesheets_delete_timesheet_with_http_info(timesheet_id, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimesheetsApi.timesheets_delete_timesheet ...'
      end
      # verify the required parameter 'timesheet_id' is set
      if @api_client.config.client_side_validation && timesheet_id.nil?
        fail ArgumentError, "Missing the required parameter 'timesheet_id' when calling TimesheetsApi.timesheets_delete_timesheet"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling TimesheetsApi.timesheets_delete_timesheet"
      end
      # resource path
      local_var_path = '/Timesheets/DeleteTimesheet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'TimesheetId'] = timesheet_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseBoolean' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimesheetsApi#timesheets_delete_timesheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the 'SubmitTimesheets' permission.
    # @param start_date [DateTime] The start date of the date range
    # @param end_date [DateTime] The end date of the date range
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseListTimesheet]
    def timesheets_get_timesheets(start_date, end_date, x_chronosheets_auth, opts = {})
      data, _status_code, _headers = timesheets_get_timesheets_with_http_info(start_date, end_date, x_chronosheets_auth, opts)
      data
    end

    # Get timesheets between start and end dates.  Note: the date range cannot exceed 24 hours.  This method is generally used to get timesheets for a particular day.    Requires the &#39;SubmitTimesheets&#39; permission.
    # @param start_date [DateTime] The start date of the date range
    # @param end_date [DateTime] The end date of the date range
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseListTimesheet, Integer, Hash)>] ApiResponseListTimesheet data, response status code and response headers
    def timesheets_get_timesheets_with_http_info(start_date, end_date, x_chronosheets_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimesheetsApi.timesheets_get_timesheets ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling TimesheetsApi.timesheets_get_timesheets"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling TimesheetsApi.timesheets_get_timesheets"
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling TimesheetsApi.timesheets_get_timesheets"
      end
      # resource path
      local_var_path = '/Timesheets/GetTimesheets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'StartDate'] = start_date
      query_params[:'EndDate'] = end_date

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseListTimesheet' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimesheetsApi#timesheets_get_timesheets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Batch update timesheets.    Requires the 'SubmitTimesheets' permission.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param request [BatchUpdateTimesheetRequest] A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created.
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseListInt32]
    def timesheets_update_timesheets(x_chronosheets_auth, request, opts = {})
      data, _status_code, _headers = timesheets_update_timesheets_with_http_info(x_chronosheets_auth, request, opts)
      data
    end

    # Batch update timesheets.    Requires the &#39;SubmitTimesheets&#39; permission.
    # @param x_chronosheets_auth [String] The ChronoSheets Auth Token
    # @param request [BatchUpdateTimesheetRequest] A BatchUpdateTimesheet Request object containing values for the new Timesheets to create or update.  If the timesheet Id is specified, then an update will be performed, else the timesheet record will be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseListInt32, Integer, Hash)>] ApiResponseListInt32 data, response status code and response headers
    def timesheets_update_timesheets_with_http_info(x_chronosheets_auth, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimesheetsApi.timesheets_update_timesheets ...'
      end
      # verify the required parameter 'x_chronosheets_auth' is set
      if @api_client.config.client_side_validation && x_chronosheets_auth.nil?
        fail ArgumentError, "Missing the required parameter 'x_chronosheets_auth' when calling TimesheetsApi.timesheets_update_timesheets"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling TimesheetsApi.timesheets_update_timesheets"
      end
      # resource path
      local_var_path = '/Timesheets/UpdateTimesheets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      header_params[:'x-chronosheets-auth'] = x_chronosheets_auth

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request) 

      # return_type
      return_type = opts[:return_type] || 'ApiResponseListInt32' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimesheetsApi#timesheets_update_timesheets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
