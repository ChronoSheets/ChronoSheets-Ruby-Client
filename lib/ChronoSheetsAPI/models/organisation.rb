=begin
#ChronoSheets API

#<div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module ChronoSheetsAPI
  class Organisation
    attr_accessor :id

    attr_accessor :name

    attr_accessor :address_line01

    attr_accessor :address_line02

    attr_accessor :suburb

    attr_accessor :state

    attr_accessor :postcode

    attr_accessor :country

    attr_accessor :phone

    attr_accessor :email_address

    attr_accessor :timezone

    attr_accessor :subscription_customer_id

    attr_accessor :signup_token

    attr_accessor :is_active

    attr_accessor :stripe_coupon_code

    attr_accessor :subscription_source

    attr_accessor :sign_up_source

    attr_accessor :mobile_sign_up_code

    attr_accessor :subscription_cycle_start

    attr_accessor :subscription_cycle_end

    attr_accessor :pricing_plans

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'Id',
        :'name' => :'Name',
        :'address_line01' => :'AddressLine01',
        :'address_line02' => :'AddressLine02',
        :'suburb' => :'Suburb',
        :'state' => :'State',
        :'postcode' => :'Postcode',
        :'country' => :'Country',
        :'phone' => :'Phone',
        :'email_address' => :'EmailAddress',
        :'timezone' => :'Timezone',
        :'subscription_customer_id' => :'SubscriptionCustomerId',
        :'signup_token' => :'SignupToken',
        :'is_active' => :'IsActive',
        :'stripe_coupon_code' => :'StripeCouponCode',
        :'subscription_source' => :'SubscriptionSource',
        :'sign_up_source' => :'SignUpSource',
        :'mobile_sign_up_code' => :'MobileSignUpCode',
        :'subscription_cycle_start' => :'SubscriptionCycleStart',
        :'subscription_cycle_end' => :'SubscriptionCycleEnd',
        :'pricing_plans' => :'PricingPlans'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'address_line01' => :'String',
        :'address_line02' => :'String',
        :'suburb' => :'String',
        :'state' => :'String',
        :'postcode' => :'String',
        :'country' => :'String',
        :'phone' => :'String',
        :'email_address' => :'String',
        :'timezone' => :'String',
        :'subscription_customer_id' => :'String',
        :'signup_token' => :'String',
        :'is_active' => :'Boolean',
        :'stripe_coupon_code' => :'String',
        :'subscription_source' => :'String',
        :'sign_up_source' => :'String',
        :'mobile_sign_up_code' => :'String',
        :'subscription_cycle_start' => :'DateTime',
        :'subscription_cycle_end' => :'DateTime',
        :'pricing_plans' => :'Array<OrganisationPricingPlan>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ChronoSheetsAPI::Organisation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ChronoSheetsAPI::Organisation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'address_line01')
        self.address_line01 = attributes[:'address_line01']
      end

      if attributes.key?(:'address_line02')
        self.address_line02 = attributes[:'address_line02']
      end

      if attributes.key?(:'suburb')
        self.suburb = attributes[:'suburb']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'email_address')
        self.email_address = attributes[:'email_address']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'subscription_customer_id')
        self.subscription_customer_id = attributes[:'subscription_customer_id']
      end

      if attributes.key?(:'signup_token')
        self.signup_token = attributes[:'signup_token']
      end

      if attributes.key?(:'is_active')
        self.is_active = attributes[:'is_active']
      end

      if attributes.key?(:'stripe_coupon_code')
        self.stripe_coupon_code = attributes[:'stripe_coupon_code']
      end

      if attributes.key?(:'subscription_source')
        self.subscription_source = attributes[:'subscription_source']
      end

      if attributes.key?(:'sign_up_source')
        self.sign_up_source = attributes[:'sign_up_source']
      end

      if attributes.key?(:'mobile_sign_up_code')
        self.mobile_sign_up_code = attributes[:'mobile_sign_up_code']
      end

      if attributes.key?(:'subscription_cycle_start')
        self.subscription_cycle_start = attributes[:'subscription_cycle_start']
      end

      if attributes.key?(:'subscription_cycle_end')
        self.subscription_cycle_end = attributes[:'subscription_cycle_end']
      end

      if attributes.key?(:'pricing_plans')
        if (value = attributes[:'pricing_plans']).is_a?(Array)
          self.pricing_plans = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      subscription_source_validator = EnumAttributeValidator.new('String', ["None", "Stripe", "AppleInApp", "GoogleInApp"])
      return false unless subscription_source_validator.valid?(@subscription_source)
      sign_up_source_validator = EnumAttributeValidator.new('String', ["Desktop", "MobileiOS", "MobileAndroid"])
      return false unless sign_up_source_validator.valid?(@sign_up_source)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] subscription_source Object to be assigned
    def subscription_source=(subscription_source)
      validator = EnumAttributeValidator.new('String', ["None", "Stripe", "AppleInApp", "GoogleInApp"])
      unless validator.valid?(subscription_source)
        fail ArgumentError, "invalid value for \"subscription_source\", must be one of #{validator.allowable_values}."
      end
      @subscription_source = subscription_source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sign_up_source Object to be assigned
    def sign_up_source=(sign_up_source)
      validator = EnumAttributeValidator.new('String', ["Desktop", "MobileiOS", "MobileAndroid"])
      unless validator.valid?(sign_up_source)
        fail ArgumentError, "invalid value for \"sign_up_source\", must be one of #{validator.allowable_values}."
      end
      @sign_up_source = sign_up_source
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          address_line01 == o.address_line01 &&
          address_line02 == o.address_line02 &&
          suburb == o.suburb &&
          state == o.state &&
          postcode == o.postcode &&
          country == o.country &&
          phone == o.phone &&
          email_address == o.email_address &&
          timezone == o.timezone &&
          subscription_customer_id == o.subscription_customer_id &&
          signup_token == o.signup_token &&
          is_active == o.is_active &&
          stripe_coupon_code == o.stripe_coupon_code &&
          subscription_source == o.subscription_source &&
          sign_up_source == o.sign_up_source &&
          mobile_sign_up_code == o.mobile_sign_up_code &&
          subscription_cycle_start == o.subscription_cycle_start &&
          subscription_cycle_end == o.subscription_cycle_end &&
          pricing_plans == o.pricing_plans
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, address_line01, address_line02, suburb, state, postcode, country, phone, email_address, timezone, subscription_customer_id, signup_token, is_active, stripe_coupon_code, subscription_source, sign_up_source, mobile_sign_up_code, subscription_cycle_start, subscription_cycle_end, pricing_plans].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        ChronoSheetsAPI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
