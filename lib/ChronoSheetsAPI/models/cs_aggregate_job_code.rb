=begin
#ChronoSheets API

#<div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module ChronoSheetsAPI
  class CSAggregateJobCode
    # The list of available tasks under this job code
    attr_accessor :available_tasks

    # The list of employee IDs that are permitted to record timesheets with this job code (empty means everyone)
    attr_accessor :permitted_employees

    # The ID of the job code (not the code itself)
    attr_accessor :id

    # The job code itself
    attr_accessor :code

    # The name of the client
    attr_accessor :client

    # The ID of the client
    attr_accessor :client_id

    # The name of the project
    attr_accessor :project

    # The ID of the project
    attr_accessor :project_id

    # Your organisation ID
    attr_accessor :organisation_id

    # A flag indicating whether or not the job code has been marked as deleted
    attr_accessor :is_deleted

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'available_tasks' => :'AvailableTasks',
        :'permitted_employees' => :'PermittedEmployees',
        :'id' => :'Id',
        :'code' => :'Code',
        :'client' => :'Client',
        :'client_id' => :'ClientId',
        :'project' => :'Project',
        :'project_id' => :'ProjectId',
        :'organisation_id' => :'OrganisationId',
        :'is_deleted' => :'IsDeleted'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'available_tasks' => :'Array<CSAggregateJobTask>',
        :'permitted_employees' => :'Array<Integer>',
        :'id' => :'Integer',
        :'code' => :'String',
        :'client' => :'String',
        :'client_id' => :'Integer',
        :'project' => :'String',
        :'project_id' => :'Integer',
        :'organisation_id' => :'Integer',
        :'is_deleted' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'AvailableTasks')
        if (value = attributes[:'AvailableTasks']).is_a?(Array)
          self.available_tasks = value
        end
      end

      if attributes.has_key?(:'PermittedEmployees')
        if (value = attributes[:'PermittedEmployees']).is_a?(Array)
          self.permitted_employees = value
        end
      end

      if attributes.has_key?(:'Id')
        self.id = attributes[:'Id']
      end

      if attributes.has_key?(:'Code')
        self.code = attributes[:'Code']
      end

      if attributes.has_key?(:'Client')
        self.client = attributes[:'Client']
      end

      if attributes.has_key?(:'ClientId')
        self.client_id = attributes[:'ClientId']
      end

      if attributes.has_key?(:'Project')
        self.project = attributes[:'Project']
      end

      if attributes.has_key?(:'ProjectId')
        self.project_id = attributes[:'ProjectId']
      end

      if attributes.has_key?(:'OrganisationId')
        self.organisation_id = attributes[:'OrganisationId']
      end

      if attributes.has_key?(:'IsDeleted')
        self.is_deleted = attributes[:'IsDeleted']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          available_tasks == o.available_tasks &&
          permitted_employees == o.permitted_employees &&
          id == o.id &&
          code == o.code &&
          client == o.client &&
          client_id == o.client_id &&
          project == o.project &&
          project_id == o.project_id &&
          organisation_id == o.organisation_id &&
          is_deleted == o.is_deleted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [available_tasks, permitted_employees, id, code, client, client_id, project, project_id, organisation_id, is_deleted].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ChronoSheetsAPI.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
