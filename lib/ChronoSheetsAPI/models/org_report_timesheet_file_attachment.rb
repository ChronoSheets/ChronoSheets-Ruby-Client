=begin
#ChronoSheets API

#<div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 3 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module ChronoSheetsAPI
  class OrgReportTimesheetFileAttachment
    attr_accessor :username

    attr_accessor :email_address

    attr_accessor :first_name

    attr_accessor :last_name

    # The ID of the timesheet this attachment is attached to.
    attr_accessor :timesheet_id

    # The limited use signed URL for the document (if it's not an image).  This URL is unique and will eventually expire.  If the attachment is an image, then this won't be set.
    attr_accessor :document_s3_signed_url

    # The limited use signed URL for the large version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.
    attr_accessor :image_large_s3_signed_url

    # The limited use signed URL for the medium version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.
    attr_accessor :image_medium_s3_signed_url

    # The limited use signed URL for the small version of the image.  This URL is unique and will eventually expire.  Only set when the attachment is actually an image.
    attr_accessor :image_small_s3_signed_url

    # The start date and time of the timesheet that this attachment is attached to
    attr_accessor :timesheet_start

    # The end date and time of the timesheet that this attachment is attached to
    attr_accessor :timesheet_end

    # The ID of the file attachment
    attr_accessor :file_attachment_id

    # The ID of the user who attached the file
    attr_accessor :user_id

    # The ID of the organisation that owns the file and employs the employee
    attr_accessor :org_id

    # The mobile platform that was used to attach the file
    attr_accessor :mobile_platform

    # The type of file attachment
    attr_accessor :attachment_type

    # Any notes regarding the file attachment
    attr_accessor :notes

    # The path to the file attachment as hosted by ChronoSheets storage, if it's not an image.  If the attachment is an image then this won't be set.
    attr_accessor :non_image_file_path

    # The path to the file attachment as hosted by ChronoSheets storage, only set if it's an image.  This is regarding the large version of the image.
    attr_accessor :image_large_file_path

    # The path to the file attachment as hosted by ChronoSheets storage, only set if it's an image.  This is regarding the medium version of the image.
    attr_accessor :image_medium_file_path

    # The path to the file attachment as hosted by ChronoSheets storage, only set if it's an image.  This is regarding the small version of the image.
    attr_accessor :image_small_file_path

    # The original file name of the attachment
    attr_accessor :original_file_name

    # Meta-data indicating the latitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file.
    attr_accessor :latitude

    # Meta-data indicating the longitude of the file attachment.  If the attachment is an image, this data originates from the meta data inside the image file.
    attr_accessor :longitude

    # The date and time the attachment was uploaded.  Time is in UTC.
    attr_accessor :date_uploaded

    # The original date and time the image was captured, if it was an image.  This data originates from the meta data inside the image file.
    attr_accessor :date_image_captured

    # The number of bytes allocated for storing the file attachment.
    attr_accessor :storage_allocation_bytes

    # If the attachment was an audio file, this field indicates the duration of the audio file in seconds.  This data originates from the meta data inside the audio file.
    attr_accessor :audio_duration_seconds

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'username' => :'Username',
        :'email_address' => :'EmailAddress',
        :'first_name' => :'FirstName',
        :'last_name' => :'LastName',
        :'timesheet_id' => :'TimesheetId',
        :'document_s3_signed_url' => :'DocumentS3SignedUrl',
        :'image_large_s3_signed_url' => :'ImageLargeS3SignedUrl',
        :'image_medium_s3_signed_url' => :'ImageMediumS3SignedUrl',
        :'image_small_s3_signed_url' => :'ImageSmallS3SignedUrl',
        :'timesheet_start' => :'TimesheetStart',
        :'timesheet_end' => :'TimesheetEnd',
        :'file_attachment_id' => :'FileAttachmentId',
        :'user_id' => :'UserId',
        :'org_id' => :'OrgId',
        :'mobile_platform' => :'MobilePlatform',
        :'attachment_type' => :'AttachmentType',
        :'notes' => :'Notes',
        :'non_image_file_path' => :'NonImageFilePath',
        :'image_large_file_path' => :'ImageLargeFilePath',
        :'image_medium_file_path' => :'ImageMediumFilePath',
        :'image_small_file_path' => :'ImageSmallFilePath',
        :'original_file_name' => :'OriginalFileName',
        :'latitude' => :'Latitude',
        :'longitude' => :'Longitude',
        :'date_uploaded' => :'DateUploaded',
        :'date_image_captured' => :'DateImageCaptured',
        :'storage_allocation_bytes' => :'StorageAllocationBytes',
        :'audio_duration_seconds' => :'AudioDurationSeconds'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'username' => :'String',
        :'email_address' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'timesheet_id' => :'Integer',
        :'document_s3_signed_url' => :'String',
        :'image_large_s3_signed_url' => :'String',
        :'image_medium_s3_signed_url' => :'String',
        :'image_small_s3_signed_url' => :'String',
        :'timesheet_start' => :'Time',
        :'timesheet_end' => :'Time',
        :'file_attachment_id' => :'Integer',
        :'user_id' => :'Integer',
        :'org_id' => :'Integer',
        :'mobile_platform' => :'String',
        :'attachment_type' => :'String',
        :'notes' => :'String',
        :'non_image_file_path' => :'String',
        :'image_large_file_path' => :'String',
        :'image_medium_file_path' => :'String',
        :'image_small_file_path' => :'String',
        :'original_file_name' => :'String',
        :'latitude' => :'Float',
        :'longitude' => :'Float',
        :'date_uploaded' => :'Time',
        :'date_image_captured' => :'Time',
        :'storage_allocation_bytes' => :'Integer',
        :'audio_duration_seconds' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ChronoSheetsAPI::OrgReportTimesheetFileAttachment` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ChronoSheetsAPI::OrgReportTimesheetFileAttachment`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'email_address')
        self.email_address = attributes[:'email_address']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'timesheet_id')
        self.timesheet_id = attributes[:'timesheet_id']
      end

      if attributes.key?(:'document_s3_signed_url')
        self.document_s3_signed_url = attributes[:'document_s3_signed_url']
      end

      if attributes.key?(:'image_large_s3_signed_url')
        self.image_large_s3_signed_url = attributes[:'image_large_s3_signed_url']
      end

      if attributes.key?(:'image_medium_s3_signed_url')
        self.image_medium_s3_signed_url = attributes[:'image_medium_s3_signed_url']
      end

      if attributes.key?(:'image_small_s3_signed_url')
        self.image_small_s3_signed_url = attributes[:'image_small_s3_signed_url']
      end

      if attributes.key?(:'timesheet_start')
        self.timesheet_start = attributes[:'timesheet_start']
      end

      if attributes.key?(:'timesheet_end')
        self.timesheet_end = attributes[:'timesheet_end']
      end

      if attributes.key?(:'file_attachment_id')
        self.file_attachment_id = attributes[:'file_attachment_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'org_id')
        self.org_id = attributes[:'org_id']
      end

      if attributes.key?(:'mobile_platform')
        self.mobile_platform = attributes[:'mobile_platform']
      end

      if attributes.key?(:'attachment_type')
        self.attachment_type = attributes[:'attachment_type']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'non_image_file_path')
        self.non_image_file_path = attributes[:'non_image_file_path']
      end

      if attributes.key?(:'image_large_file_path')
        self.image_large_file_path = attributes[:'image_large_file_path']
      end

      if attributes.key?(:'image_medium_file_path')
        self.image_medium_file_path = attributes[:'image_medium_file_path']
      end

      if attributes.key?(:'image_small_file_path')
        self.image_small_file_path = attributes[:'image_small_file_path']
      end

      if attributes.key?(:'original_file_name')
        self.original_file_name = attributes[:'original_file_name']
      end

      if attributes.key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.key?(:'date_uploaded')
        self.date_uploaded = attributes[:'date_uploaded']
      end

      if attributes.key?(:'date_image_captured')
        self.date_image_captured = attributes[:'date_image_captured']
      end

      if attributes.key?(:'storage_allocation_bytes')
        self.storage_allocation_bytes = attributes[:'storage_allocation_bytes']
      end

      if attributes.key?(:'audio_duration_seconds')
        self.audio_duration_seconds = attributes[:'audio_duration_seconds']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      mobile_platform_validator = EnumAttributeValidator.new('String', ["Unknown", "iOS", "Android"])
      return false unless mobile_platform_validator.valid?(@mobile_platform)
      attachment_type_validator = EnumAttributeValidator.new('String', ["Image", "WordDoc", "Pdf", "MSSpreadSheet", "MSPowerPoint", "RichTextFormat", "ZipFile", "Other", "Audio"])
      return false unless attachment_type_validator.valid?(@attachment_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mobile_platform Object to be assigned
    def mobile_platform=(mobile_platform)
      validator = EnumAttributeValidator.new('String', ["Unknown", "iOS", "Android"])
      unless validator.valid?(mobile_platform)
        fail ArgumentError, "invalid value for \"mobile_platform\", must be one of #{validator.allowable_values}."
      end
      @mobile_platform = mobile_platform
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attachment_type Object to be assigned
    def attachment_type=(attachment_type)
      validator = EnumAttributeValidator.new('String', ["Image", "WordDoc", "Pdf", "MSSpreadSheet", "MSPowerPoint", "RichTextFormat", "ZipFile", "Other", "Audio"])
      unless validator.valid?(attachment_type)
        fail ArgumentError, "invalid value for \"attachment_type\", must be one of #{validator.allowable_values}."
      end
      @attachment_type = attachment_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          username == o.username &&
          email_address == o.email_address &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          timesheet_id == o.timesheet_id &&
          document_s3_signed_url == o.document_s3_signed_url &&
          image_large_s3_signed_url == o.image_large_s3_signed_url &&
          image_medium_s3_signed_url == o.image_medium_s3_signed_url &&
          image_small_s3_signed_url == o.image_small_s3_signed_url &&
          timesheet_start == o.timesheet_start &&
          timesheet_end == o.timesheet_end &&
          file_attachment_id == o.file_attachment_id &&
          user_id == o.user_id &&
          org_id == o.org_id &&
          mobile_platform == o.mobile_platform &&
          attachment_type == o.attachment_type &&
          notes == o.notes &&
          non_image_file_path == o.non_image_file_path &&
          image_large_file_path == o.image_large_file_path &&
          image_medium_file_path == o.image_medium_file_path &&
          image_small_file_path == o.image_small_file_path &&
          original_file_name == o.original_file_name &&
          latitude == o.latitude &&
          longitude == o.longitude &&
          date_uploaded == o.date_uploaded &&
          date_image_captured == o.date_image_captured &&
          storage_allocation_bytes == o.storage_allocation_bytes &&
          audio_duration_seconds == o.audio_duration_seconds
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [username, email_address, first_name, last_name, timesheet_id, document_s3_signed_url, image_large_s3_signed_url, image_medium_s3_signed_url, image_small_s3_signed_url, timesheet_start, timesheet_end, file_attachment_id, user_id, org_id, mobile_platform, attachment_type, notes, non_image_file_path, image_large_file_path, image_medium_file_path, image_small_file_path, original_file_name, latitude, longitude, date_uploaded, date_image_captured, storage_allocation_bytes, audio_duration_seconds].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ChronoSheetsAPI.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
