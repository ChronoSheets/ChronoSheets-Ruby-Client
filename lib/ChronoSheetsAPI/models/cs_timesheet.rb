=begin
#ChronoSheets API

#<div style='font-size: 14px!important;font-family: Open Sans,sans-serif!important;color: #3b4151!important;'><p>      ChronoSheets is a flexible timesheet solution for small to medium businesses, it is free for small teams of up to 5 and there are iOS and Android apps available.  Use the ChronoSheets API to create your own custom integrations.  Before starting, sign up for a ChronoSheets account at <a target='_BLANK' href='http://tsheets.xyz/signup'>http://tsheets.xyz/signup</a>.  </p></div><div id='cs-extra-info'></div>

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module ChronoSheetsAPI

  class CSTimesheet
    attr_accessor :timesheet_id

    attr_accessor :user_id

    attr_accessor :job_id

    attr_accessor :task_id

    attr_accessor :start_date_time

    attr_accessor :end_date_time

    attr_accessor :description

    attr_accessor :trip_id

    attr_accessor :file_attachment_count

    attr_accessor :pay_amount

    attr_accessor :overtime_pay_amount

    attr_accessor :includes_overtime


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'timesheet_id' => :'TimesheetId',
        :'user_id' => :'UserId',
        :'job_id' => :'JobId',
        :'task_id' => :'TaskId',
        :'start_date_time' => :'StartDateTime',
        :'end_date_time' => :'EndDateTime',
        :'description' => :'Description',
        :'trip_id' => :'TripId',
        :'file_attachment_count' => :'FileAttachmentCount',
        :'pay_amount' => :'PayAmount',
        :'overtime_pay_amount' => :'OvertimePayAmount',
        :'includes_overtime' => :'IncludesOvertime'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'timesheet_id' => :'Integer',
        :'user_id' => :'Integer',
        :'job_id' => :'Integer',
        :'task_id' => :'Integer',
        :'start_date_time' => :'DateTime',
        :'end_date_time' => :'DateTime',
        :'description' => :'String',
        :'trip_id' => :'Integer',
        :'file_attachment_count' => :'Integer',
        :'pay_amount' => :'Float',
        :'overtime_pay_amount' => :'Float',
        :'includes_overtime' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'TimesheetId')
        self.timesheet_id = attributes[:'TimesheetId']
      end

      if attributes.has_key?(:'UserId')
        self.user_id = attributes[:'UserId']
      end

      if attributes.has_key?(:'JobId')
        self.job_id = attributes[:'JobId']
      end

      if attributes.has_key?(:'TaskId')
        self.task_id = attributes[:'TaskId']
      end

      if attributes.has_key?(:'StartDateTime')
        self.start_date_time = attributes[:'StartDateTime']
      end

      if attributes.has_key?(:'EndDateTime')
        self.end_date_time = attributes[:'EndDateTime']
      end

      if attributes.has_key?(:'Description')
        self.description = attributes[:'Description']
      end

      if attributes.has_key?(:'TripId')
        self.trip_id = attributes[:'TripId']
      end

      if attributes.has_key?(:'FileAttachmentCount')
        self.file_attachment_count = attributes[:'FileAttachmentCount']
      end

      if attributes.has_key?(:'PayAmount')
        self.pay_amount = attributes[:'PayAmount']
      end

      if attributes.has_key?(:'OvertimePayAmount')
        self.overtime_pay_amount = attributes[:'OvertimePayAmount']
      end

      if attributes.has_key?(:'IncludesOvertime')
        self.includes_overtime = attributes[:'IncludesOvertime']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          timesheet_id == o.timesheet_id &&
          user_id == o.user_id &&
          job_id == o.job_id &&
          task_id == o.task_id &&
          start_date_time == o.start_date_time &&
          end_date_time == o.end_date_time &&
          description == o.description &&
          trip_id == o.trip_id &&
          file_attachment_count == o.file_attachment_count &&
          pay_amount == o.pay_amount &&
          overtime_pay_amount == o.overtime_pay_amount &&
          includes_overtime == o.includes_overtime
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [timesheet_id, user_id, job_id, task_id, start_date_time, end_date_time, description, trip_id, file_attachment_count, pay_amount, overtime_pay_amount, includes_overtime].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ChronoSheetsAPI.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
